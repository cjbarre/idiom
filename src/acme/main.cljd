(ns acme.main
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter/rendering.dart" :as fr]
            ["package:flutter/services.dart" :as ds]
            ["package:flutter/widgets.dart" :as fw]
            ["dart:typed_data" :as td]
            ["dart:convert" :as convert]
            ["dart:io" :as io :refer [File stdout]]
            [cljd.reader :as r]
            [cljd.flutter.alpha2 :refer [widget]]))

(def default-text-field-value "RIGS KYI BU RNAMS LEGS PAR DGE BA'I SEMS KYIS NYON CIG")

(defn word-tile-component
  [{:keys [word lookup-results]}]
  (m/ExpansionTile
   .title (m/Text word)
   .children [(m/Row
               .children
               [(m/Container
                 .padding (m/EdgeInsets.all 16)
                 .child
                 (m/Column
                  .crossAxisAlignment fr/CrossAxisAlignment.start
                  .children
                  (mapcat (fn [{:keys [source definitions]}]
                            [(m/Text source .style (m/TextStyle .fontWeight m/FontWeight.bold))
                             (m/Text "")
                             (m/Text (str "â€¢ " definitions))
                             (m/Text "")])
                          lookup-results)))])]))

(defn dictionary-component
  [dictionary]
  (widget
   :let [state (atom {:switch-on? true})]
   :watch [as state]
   (m/Scaffold
    #_#_.appBar (m/AppBar
             .title
             (m/Text (:hello dictionary))))
   .body
   m/SingleChildScrollView
   m/Column
   .children
   [(m/Container
     .padding (m/EdgeInsets.all 8)
     .margin (m/EdgeInsets.only .top 8)
     .child (m/TextFormField
             .initialValue default-text-field-value
             .decoration (m/InputDecoration
                          .border
                          (m/OutlineInputBorder))
             .maxLines 5))
    (m/Row
     .children
     [(m/Switch
       .value (:switch-on? @state)
       .onChanged (fn [value] (swap! state assoc :switch-on? value) nil))
      (m/Text "Word Guessing")])
    (word-tile-component
     {:word "RIGS KYI BU"
      :lookup-results [{:source "tshig mdzod chen mo"
                        :definitions "slob dpon gyis rang gi slob ma rnams la 'bod pa'i gces ming/"}
                       {:source "Jim Valby"
                        :definitions "noble and honored sirs, noble son"}
                       {:source "Yoghacharabhumi"
                        :definitions "kula-putra"}]})
    (word-tile-component
     {:word "RNAMS"
      :lookup-results []})
    (word-tile-component
     {:word "LEGS PAR"
      :lookup-results []})
    (word-tile-component
     {:word "DGE BA"
      :lookup-results []})
    (word-tile-component
     {:word "SEMS KYIS"
      :lookup-results []})
    (word-tile-component
     {:word "NYON CIG"
      :lookup-results []})]))

(defn ByteData->utf8
  [^td/ByteData byte-data]
  (let [buffer (.-buffer byte-data)]
    (.asUint8List buffer (.-offsetInBytes byte-data) (.-lengthInBytes byte-data))))

(defn get-gzipped-json-asset [path]
  (let [file (await (ds/rootBundle.load path))]
    (->> file
         ByteData->utf8
         (io/gzip.decode)
         (convert/utf8.decode)
         (convert/json.decode))
    #_(await (r/read-string (->> file
                                 ByteData->utf8
                                 (io/gzip.decode)
                                 (convert/utf8.decode))))))

(defn main []
  (fw/WidgetsFlutterBinding.ensureInitialized)
  (let [dictionary (await (get-gzipped-json-asset "assets/dictionary.json.gz"))]
    (m/runApp
     (m/MaterialApp
      .title "Welcome to Flutter"
      .theme (m/ThemeData .primarySwatch m/Colors.grey)
      .home
      #_(widget
         :watch [json (get-gzipped-json-asset "assets/dictionary.json.gz")]
         (if json
           (m/Text (str "Loaded " (count json) " " (-> json first key)))
           (m/Text "Loading")))
      (dictionary-component dictionary)))))



