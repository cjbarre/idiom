(ns acme.main
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter/rendering.dart" :as fr]
            ["package:flutter/services.dart" :as ds]
            ["package:flutter/widgets.dart" :as fw]
            ["package:flutter/painting.dart" :as fp]
            ["dart:typed_data" :as td]
            ["dart:convert" :as convert]
            ["dart:io" :as io :refer [File stdout]]
            ["dart:core" :as c]
            [cljd.reader :as r]
            [cljd.flutter.alpha2 :refer [widget]]
            [cljd.string :as s]
            [acme.dictionary :refer [lookup-sections lookup-definitions]]))

(def default-text-field-value
  "rigs kyi bu rnams legs par dge ba'i sems kyis nyon cig")

(def source-display-names
  {"tshig-mdzod-chen-mo-tib" "tshig mdzod chen mo"
   "JimValby" "Jim Valby"})

(defn word-tile-component
  [{:keys [word lookup-results]}]
  (m/ExpansionTile
   .title (m/Text word)
   .children [(m/Container
               .padding (m/EdgeInsets.all 16)
               .child
               (m/Column
                .crossAxisAlignment fr/CrossAxisAlignment.stretch
                .children
                (mapcat (fn [x]
                          [(m/Text (or (source-display-names (get x "source")) (get x "source")) .style (m/TextStyle .fontWeight m/FontWeight.bold))
                           (m/Text "")
                           (m/Text (str "â€¢ " (get x "definition")))
                           (m/Text "")])
                        lookup-results)))]))

(defn dictionary-component
  [dictionary]
  (widget
   :let [state (atom {:syllables-only? false
                      :search-string default-text-field-value})]
   :watch [as state]
   (m/Scaffold)
   .body
   m/SingleChildScrollView
   m/Column
   .children
   (concat [(m/Container
             .padding (m/EdgeInsets.all 8)
             .margin (m/EdgeInsets.only .top 8)
             .child (m/TextFormField
                     .onChanged (fn [text] (swap! state assoc :search-string text) nil)
                     .initialValue (:search-string @state)
                     .decoration (m/InputDecoration
                                  .border
                                  (m/OutlineInputBorder))
                     .maxLines 5))
            (m/Row
             .children
             [(m/Switch
               .value (:syllables-only? @state)
               .onChanged (fn [value] (swap! state assoc :syllables-only? value) nil))
              (m/Text "Syllables Only")])]

           (let [text-sections (lookup-sections dictionary (not (:syllables-only? @state)) (:search-string @state))
                 dictionary-results (->> text-sections
                                         (mapcat #(lookup-definitions dictionary %)))
                 results (mapcat (fn [dictionary-result]
                                   (mapv #(word-tile-component {:word (key %) :lookup-results (val %)})
                                         dictionary-result))
                                 dictionary-results)]
             
             results))))

(defn ByteData->utf8
  [^td/ByteData byte-data]
  (let [buffer (.-buffer byte-data)]
    (.asUint8List buffer (.-offsetInBytes byte-data) (.-lengthInBytes byte-data))))

(defn get-json-asset [path]
  (let [file (await (ds/rootBundle.load path))]
    (->> file
         ByteData->utf8
         (convert/utf8.decode)
         (convert/json.decode))))

(defn main []
  (fw/WidgetsFlutterBinding.ensureInitialized)
  (let [dictionary (await (get-json-asset "assets/dictionary.json"))]
    (m/runApp
     (m/MaterialApp
      .title "idiom | An experimental dictionary for Tibetan translators"
      .theme (m/ThemeData .brightness m/Brightness.dark)
      .home
      (dictionary-component dictionary)))))



