(ns acme.main
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter/rendering.dart" :as fr]
            ["package:flutter/services.dart" :as ds]
            ["package:flutter/widgets.dart" :as fw]
            ["dart:typed_data" :as td]
            ["dart:convert" :as convert]
            ["dart:io" :as io :refer [File stdout]]
            ["dart:core" :as c]
            [cljd.reader :as r]
            [cljd.flutter.alpha2 :refer [widget]]
            [cljd.string :as s]
            [acme.dictionary :refer [lookup-sections lookup-definitions]]))

(def default-text-field-value 
  "RIGS KYI BU RNAMS LEGS PAR DGE BA'I SEMS KYIS NYON CIG")

(defn word-tile-component
  [{:keys [word lookup-results]}]
  (m/ExpansionTile
   .title (m/Text word)
   .children [(m/Container
               .padding (m/EdgeInsets.all 16)
               .child
               (m/Column
                .crossAxisAlignment fr/CrossAxisAlignment.stretch
                .children
                (mapcat (fn [x]
                          [(m/Text (get x "source") .style (m/TextStyle .fontWeight m/FontWeight.bold))
                           (m/Text "")
                           (m/Text (str "• " (get x "definition")))
                           #_(m/Text (->> (s/split (get x "definition") #"/")
                                          (filter #(and (not (s/blank? %)) (not (nil? %))))
                                          (map #(str "• " %))
                                          (s/join "\n")))
                           (m/Text "")])
                        lookup-results)))]))

(defn dictionary-component
  [dictionary]
  (widget
   :let [state (atom {:word-guessing-on? true
                      :search-string default-text-field-value})]
   :watch [as state]
   (m/Scaffold
    #_#_.appBar (m/AppBar
                 .title
                 (m/Text (:hello dictionary))))
   .body
   m/SingleChildScrollView
   m/Column
   .children
   (concat [(m/Container
             .padding (m/EdgeInsets.all 8)
             .margin (m/EdgeInsets.only .top 8)
             .child (m/TextFormField
                     .onChanged (fn [text] (swap! state assoc :search-string text) nil)
                     .initialValue (:search-string @state)
                     .decoration (m/InputDecoration
                                  .border
                                  (m/OutlineInputBorder))
                     .maxLines 5))
            (m/Row
             .children
             [(m/Switch
               .value (:word-guessing-on? @state)
               .onChanged (fn [value] (swap! state assoc :word-guessing-on? value) nil))
              (m/Text "Word Guessing")])]

           (let [text-sections (lookup-sections dictionary (:word-guessing-on? @state) (:search-string @state))
                 dictionary-results (->> text-sections
                                         (mapcat #(lookup-definitions dictionary %)))
                 results (mapcat (fn [dictionary-result]
                                   (mapv #(word-tile-component {:word (key %) :lookup-results (val %)})
                                         dictionary-result))
                                 dictionary-results)]
             
             results))))

(defn ByteData->utf8
  [^td/ByteData byte-data]
  (let [buffer (.-buffer byte-data)]
    (.asUint8List buffer (.-offsetInBytes byte-data) (.-lengthInBytes byte-data))))

(defn get-gzipped-json-asset [path]
  (let [file (await (ds/rootBundle.load path))]
    (->> file
         ByteData->utf8
         (io/gzip.decode)
         (convert/utf8.decode)
         (convert/json.decode))
    #_(await (r/read-string (->> file
                                 ByteData->utf8
                                 (io/gzip.decode)
                                 (convert/utf8.decode))))))

(defn main []
  (fw/WidgetsFlutterBinding.ensureInitialized)
  (let [dictionary (await (get-gzipped-json-asset "assets/dictionary.json.gz"))]
    (m/runApp
     (m/MaterialApp
      .title "Welcome to Flutter"
      .theme (m/ThemeData .primarySwatch m/Colors.grey)
      .home
      #_(widget
         :watch [json (get-gzipped-json-asset "assets/dictionary.json.gz")]
         (if json
           (m/Text (str "Loaded " (count json) " " (-> json first key)))
           (m/Text "Loading")))
      (dictionary-component dictionary)))))



